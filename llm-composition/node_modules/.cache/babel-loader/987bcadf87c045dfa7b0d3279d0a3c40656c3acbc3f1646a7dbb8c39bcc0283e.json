{"ast":null,"code":"var _jsxFileName = \"/Users/nhuang/Desktop/AIPR/llm-composition/src/components/OverviewFlow/OverviewFlow.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useState } from 'react';\nimport ReactFlow, { addEdge, MiniMap, Controls, Background, useNodesState, useEdgesState } from 'reactflow';\n// import useWebSocket from 'react-use-websocket';\nimport { io } from 'socket.io-client';\nimport { nodes as initialNodes, edges as initialEdges } from './initial-elements';\nimport CustomNode from './CustomNode';\nimport 'reactflow/dist/style.css';\nimport './overview.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  custom: CustomNode\n};\nconst minimapStyle = {\n  height: 120\n};\nconst onInit = reactFlowInstance => console.log('flow loaded:', reactFlowInstance);\nconst OverviewFlow = () => {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [messages, setMessages] = useState([]);\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), []);\n\n  /* Flask SSE */\n  // const initializeSSE = useCallback(() => {\n  //   const sse = new EventSource('http://127.0.0.1:5000/sse');\n  //   sse.onmessage = (event) => {\n  //     const data = JSON.parse(event.data);\n\n  //     if (data.type === 'addEdge') {\n  //       setEdges((eds) => addEdge(data.edge, eds));\n  //     }\n  //   };\n  //   sse.onerror = () => {\n  //     console.error('SSE connection error');\n  //   };\n  //   return () => {\n  //     sse.close();\n  //   };\n  // }, []);\n\n  // useEffect(() => {\n  //   const cleanup = initializeSSE();\n  //   return cleanup;\n  // }, [initializeSSE]);\n\n  /* Sockets Approach 1 */\n  // const socketUrl = 'ws://localhost:5000/sse';\n  // console.log('Attempting to connect to WebSocket:', socketUrl); // Add this line to log WebSocket connection attempts\n  // const { sendMessage, lastMessage, readyState } = useWebSocket(socketUrl);\n\n  // useEffect(() => {\n  //   console.log(\"WebSocket readyState:\", readyState); // Add this line to log the WebSocket connection status\n  // }, [readyState]);\n\n  // useEffect(() => {\n  //   if (lastMessage) {\n  //     const data = JSON.parse(lastMessage.data);\n  //     console.log('Received data:', data);\n  //     if (data.type === 'addEdge') {\n  //       setEdges((eds) => addEdge(data.edge, eds));\n  //     }\n  //   }\n  // }, [lastMessage]);\n\n  /* Sockets Approach 2*/\n  useEffect(() => {\n    const socket = io('http://localhost:5000');\n    socket.on('addEdge', data => {\n      if (data.type === 'addEdge') {\n        setMessages(prevMessages => [...prevMessages, data.edge.label]);\n        setEdges([]);\n        setEdges(eds => addEdge(data.edge, eds));\n      }\n    });\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n\n  // we are using a bit of a shortcut here to adjust the edge type\n  // this could also be done with a custom edge for example\n  const edgesWithUpdatedTypes = edges.map(edge => {\n    if (edge.sourceHandle) {\n      const edgeType = nodes.find(node => node.type === 'custom').data.selects[edge.sourceHandle];\n      edge.type = edgeType;\n    }\n    return edge;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"row\",\n    style: {\n      width: '100vw',\n      height: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edgesWithUpdatedTypes,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      onInit: onInit,\n      fitView: true,\n      attributionPosition: \"top-right\",\n      nodeTypes: nodeTypes,\n      style: {\n        width: '60%',\n        height: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(MiniMap, {\n        style: minimapStyle,\n        zoomable: true,\n        pannable: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Background, {\n        color: \"#aaa\",\n        gap: 16\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '40%',\n        height: '100%'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: messages.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: item\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n_s(OverviewFlow, \"BcAZC68oDq3zjbvDSw6t7+Ef+UQ=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = OverviewFlow;\nexport default OverviewFlow;\nvar _c;\n$RefreshReg$(_c, \"OverviewFlow\");","map":{"version":3,"names":["React","useCallback","useEffect","useState","ReactFlow","addEdge","MiniMap","Controls","Background","useNodesState","useEdgesState","io","nodes","initialNodes","edges","initialEdges","CustomNode","jsxDEV","_jsxDEV","nodeTypes","custom","minimapStyle","height","onInit","reactFlowInstance","console","log","OverviewFlow","_s","setNodes","onNodesChange","setEdges","onEdgesChange","messages","setMessages","onConnect","params","eds","socket","on","data","type","prevMessages","edge","label","disconnect","edgesWithUpdatedTypes","map","sourceHandle","edgeType","find","node","selects","class","style","width","children","fitView","attributionPosition","zoomable","pannable","fileName","_jsxFileName","lineNumber","columnNumber","color","gap","item","index","_c","$RefreshReg$"],"sources":["/Users/nhuang/Desktop/AIPR/llm-composition/src/components/OverviewFlow/OverviewFlow.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport ReactFlow, {\n  addEdge,\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n} from 'reactflow';\n// import useWebSocket from 'react-use-websocket';\nimport { io } from 'socket.io-client';\n\n\n\nimport { nodes as initialNodes, edges as initialEdges } from './initial-elements';\nimport CustomNode from './CustomNode';\n\nimport 'reactflow/dist/style.css';\nimport './overview.css';\n\nconst nodeTypes = {\n  custom: CustomNode,\n};\n\nconst minimapStyle = {\n  height: 120,\n};\n\nconst onInit = (reactFlowInstance) => console.log('flow loaded:', reactFlowInstance);\n\nconst OverviewFlow = () => {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [messages, setMessages] = useState([]);\n  const onConnect = useCallback((params) => setEdges((eds) => addEdge(params, eds)), []);\n\n\n  /* Flask SSE */\n  // const initializeSSE = useCallback(() => {\n  //   const sse = new EventSource('http://127.0.0.1:5000/sse');\n  //   sse.onmessage = (event) => {\n  //     const data = JSON.parse(event.data);\n  \n  //     if (data.type === 'addEdge') {\n  //       setEdges((eds) => addEdge(data.edge, eds));\n  //     }\n  //   };\n  //   sse.onerror = () => {\n  //     console.error('SSE connection error');\n  //   };\n  //   return () => {\n  //     sse.close();\n  //   };\n  // }, []);\n\n  // useEffect(() => {\n  //   const cleanup = initializeSSE();\n  //   return cleanup;\n  // }, [initializeSSE]);\n\n\n  /* Sockets Approach 1 */\n  // const socketUrl = 'ws://localhost:5000/sse';\n  // console.log('Attempting to connect to WebSocket:', socketUrl); // Add this line to log WebSocket connection attempts\n  // const { sendMessage, lastMessage, readyState } = useWebSocket(socketUrl);\n\n  // useEffect(() => {\n  //   console.log(\"WebSocket readyState:\", readyState); // Add this line to log the WebSocket connection status\n  // }, [readyState]);\n\n  // useEffect(() => {\n  //   if (lastMessage) {\n  //     const data = JSON.parse(lastMessage.data);\n  //     console.log('Received data:', data);\n  //     if (data.type === 'addEdge') {\n  //       setEdges((eds) => addEdge(data.edge, eds));\n  //     }\n  //   }\n  // }, [lastMessage]);\n\n\n\n\n  /* Sockets Approach 2*/\n  useEffect(() => {\n    const socket = io('http://localhost:5000');\n\n    socket.on('addEdge', (data) => {\n      if (data.type === 'addEdge') {\n        setMessages((prevMessages) => [...prevMessages, data.edge.label]);\n        setEdges([])\n        setEdges((eds) => addEdge(data.edge, eds));\n      }\n    });\n\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n\n\n\n\n  // we are using a bit of a shortcut here to adjust the edge type\n  // this could also be done with a custom edge for example\n  const edgesWithUpdatedTypes = edges.map((edge) => {\n    if (edge.sourceHandle) {\n      const edgeType = nodes.find((node) => node.type === 'custom').data.selects[edge.sourceHandle];\n      edge.type = edgeType;\n    }\n\n    return edge;\n  });\n\n  return (\n    <div class=\"row\" style={{ width: '100vw', height: '100vh' }}>\n        <ReactFlow\n          nodes={nodes}\n          edges={edgesWithUpdatedTypes}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={onConnect}\n          onInit={onInit}\n          fitView\n          attributionPosition=\"top-right\"\n          nodeTypes={nodeTypes}\n          style={{ width: '60%', height: '100%' }}\n        >\n          <MiniMap style={minimapStyle} zoomable pannable />\n          <Controls />\n          <Background color=\"#aaa\" gap={16} />\n        </ReactFlow>\n        <div style={{ width: '40%', height: '100%' }}>\n          <ul>\n            {messages.map((item, index) => (\n              <li key={index}>{item}</li>\n            ))}\n          </ul>\n        </div>\n    </div>\n  );\n};\n\nexport default OverviewFlow;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}