{"ast":null,"code":"var _jsxFileName = \"/Users/nhuang/Desktop/AIPR/llm-composition/src/components/OverviewFlow/OverviewFlow.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect } from 'react';\nimport ReactFlow, { addEdge, MiniMap, Controls, Background, useNodesState, useEdgesState } from 'reactflow';\nimport { nodes as initialNodes, edges as initialEdges } from './initial-elements';\nimport CustomNode from './CustomNode';\nimport 'reactflow/dist/style.css';\nimport './overview.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  custom: CustomNode\n};\nconst minimapStyle = {\n  height: 120\n};\nconst onInit = reactFlowInstance => console.log('flow loaded:', reactFlowInstance);\nconst OverviewFlow = () => {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), []);\n  const initializeSSE = useCallback(() => {\n    const sse = new EventSource('/sse');\n    sse.onmessage = event => {\n      const data = JSON.parse(event.data);\n      if (data.type === 'addEdge') {\n        setEdges(eds => addEdge(data.edge, eds));\n      }\n    };\n    sse.onerror = () => {\n      console.error('SSE connection error');\n    };\n    return () => {\n      sse.close();\n    };\n  }, []);\n  useEffect(() => {\n    const cleanup = initializeSSE();\n    return cleanup;\n  }, [initializeSSE]);\n\n  // we are using a bit of a shortcut here to adjust the edge type\n  // this could also be done with a custom edge for example\n  const edgesWithUpdatedTypes = edges.map(edge => {\n    if (edge.sourceHandle) {\n      const edgeType = nodes.find(node => node.type === 'custom').data.selects[edge.sourceHandle];\n      edge.type = edgeType;\n    }\n    return edge;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '80vw',\n      height: '100vh'\n    },\n    children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edgesWithUpdatedTypes,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      onInit: onInit,\n      fitView: true,\n      attributionPosition: \"top-right\",\n      nodeTypes: nodeTypes,\n      children: [/*#__PURE__*/_jsxDEV(MiniMap, {\n        style: minimapStyle,\n        zoomable: true,\n        pannable: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {\n        color: \"#aaa\",\n        gap: 16\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(OverviewFlow, \"hzMh8RX1A1BgQJNu9tnH5xzQmmc=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = OverviewFlow;\nexport default OverviewFlow;\nvar _c;\n$RefreshReg$(_c, \"OverviewFlow\");","map":{"version":3,"names":["React","useCallback","useEffect","ReactFlow","addEdge","MiniMap","Controls","Background","useNodesState","useEdgesState","nodes","initialNodes","edges","initialEdges","CustomNode","jsxDEV","_jsxDEV","nodeTypes","custom","minimapStyle","height","onInit","reactFlowInstance","console","log","OverviewFlow","_s","setNodes","onNodesChange","setEdges","onEdgesChange","onConnect","params","eds","initializeSSE","sse","EventSource","onmessage","event","data","JSON","parse","type","edge","onerror","error","close","cleanup","edgesWithUpdatedTypes","map","sourceHandle","edgeType","find","node","selects","style","width","children","fitView","attributionPosition","zoomable","pannable","fileName","_jsxFileName","lineNumber","columnNumber","color","gap","_c","$RefreshReg$"],"sources":["/Users/nhuang/Desktop/AIPR/llm-composition/src/components/OverviewFlow/OverviewFlow.js"],"sourcesContent":["import React, { useCallback, useEffect } from 'react';\nimport ReactFlow, {\n  addEdge,\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n} from 'reactflow';\n\nimport { nodes as initialNodes, edges as initialEdges } from './initial-elements';\nimport CustomNode from './CustomNode';\n\nimport 'reactflow/dist/style.css';\nimport './overview.css';\n\nconst nodeTypes = {\n  custom: CustomNode,\n};\n\nconst minimapStyle = {\n  height: 120,\n};\n\nconst onInit = (reactFlowInstance) => console.log('flow loaded:', reactFlowInstance);\n\nconst OverviewFlow = () => {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const onConnect = useCallback((params) => setEdges((eds) => addEdge(params, eds)), []);\n\n  const initializeSSE = useCallback(() => {\n    const sse = new EventSource('/sse');\n    sse.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n  \n      if (data.type === 'addEdge') {\n        setEdges((eds) => addEdge(data.edge, eds));\n      }\n    };\n    sse.onerror = () => {\n      console.error('SSE connection error');\n    };\n    return () => {\n      sse.close();\n    };\n  }, []);\n\n  useEffect(() => {\n    const cleanup = initializeSSE();\n    return cleanup;\n  }, [initializeSSE]);\n\n  // we are using a bit of a shortcut here to adjust the edge type\n  // this could also be done with a custom edge for example\n  const edgesWithUpdatedTypes = edges.map((edge) => {\n    if (edge.sourceHandle) {\n      const edgeType = nodes.find((node) => node.type === 'custom').data.selects[edge.sourceHandle];\n      edge.type = edgeType;\n    }\n\n    return edge;\n  });\n\n  return (\n    <div style={{ width: '80vw', height: '100vh' }}>\n        <ReactFlow\n        nodes={nodes}\n        edges={edgesWithUpdatedTypes}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        onInit={onInit}\n        fitView\n        attributionPosition=\"top-right\"\n        nodeTypes={nodeTypes}\n        >\n        <MiniMap style={minimapStyle} zoomable pannable />\n        <Controls />\n        <Background color=\"#aaa\" gap={16} />\n        </ReactFlow>\n    </div>\n  );\n};\n\nexport default OverviewFlow;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,WAAW,EAAEC,SAAS,QAAQ,OAAO;AACrD,OAAOC,SAAS,IACdC,OAAO,EACPC,OAAO,EACPC,QAAQ,EACRC,UAAU,EACVC,aAAa,EACbC,aAAa,QACR,WAAW;AAElB,SAASC,KAAK,IAAIC,YAAY,EAAEC,KAAK,IAAIC,YAAY,QAAQ,oBAAoB;AACjF,OAAOC,UAAU,MAAM,cAAc;AAErC,OAAO,0BAA0B;AACjC,OAAO,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,MAAMC,SAAS,GAAG;EAChBC,MAAM,EAAEJ;AACV,CAAC;AAED,MAAMK,YAAY,GAAG;EACnBC,MAAM,EAAE;AACV,CAAC;AAED,MAAMC,MAAM,GAAIC,iBAAiB,IAAKC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,iBAAiB,CAAC;AAEpF,MAAMG,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAAChB,KAAK,EAAEiB,QAAQ,EAAEC,aAAa,CAAC,GAAGpB,aAAa,CAACG,YAAY,CAAC;EACpE,MAAM,CAACC,KAAK,EAAEiB,QAAQ,EAAEC,aAAa,CAAC,GAAGrB,aAAa,CAACI,YAAY,CAAC;EACpE,MAAMkB,SAAS,GAAG9B,WAAW,CAAE+B,MAAM,IAAKH,QAAQ,CAAEI,GAAG,IAAK7B,OAAO,CAAC4B,MAAM,EAAEC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC;EAEtF,MAAMC,aAAa,GAAGjC,WAAW,CAAC,MAAM;IACtC,MAAMkC,GAAG,GAAG,IAAIC,WAAW,CAAC,MAAM,CAAC;IACnCD,GAAG,CAACE,SAAS,GAAIC,KAAK,IAAK;MACzB,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACC,IAAI,CAAC;MAEnC,IAAIA,IAAI,CAACG,IAAI,KAAK,SAAS,EAAE;QAC3Bb,QAAQ,CAAEI,GAAG,IAAK7B,OAAO,CAACmC,IAAI,CAACI,IAAI,EAAEV,GAAG,CAAC,CAAC;MAC5C;IACF,CAAC;IACDE,GAAG,CAACS,OAAO,GAAG,MAAM;MAClBrB,OAAO,CAACsB,KAAK,CAAC,sBAAsB,CAAC;IACvC,CAAC;IACD,OAAO,MAAM;MACXV,GAAG,CAACW,KAAK,CAAC,CAAC;IACb,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN5C,SAAS,CAAC,MAAM;IACd,MAAM6C,OAAO,GAAGb,aAAa,CAAC,CAAC;IAC/B,OAAOa,OAAO;EAChB,CAAC,EAAE,CAACb,aAAa,CAAC,CAAC;;EAEnB;EACA;EACA,MAAMc,qBAAqB,GAAGpC,KAAK,CAACqC,GAAG,CAAEN,IAAI,IAAK;IAChD,IAAIA,IAAI,CAACO,YAAY,EAAE;MACrB,MAAMC,QAAQ,GAAGzC,KAAK,CAAC0C,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACX,IAAI,KAAK,QAAQ,CAAC,CAACH,IAAI,CAACe,OAAO,CAACX,IAAI,CAACO,YAAY,CAAC;MAC7FP,IAAI,CAACD,IAAI,GAAGS,QAAQ;IACtB;IAEA,OAAOR,IAAI;EACb,CAAC,CAAC;EAEF,oBACE3B,OAAA;IAAKuC,KAAK,EAAE;MAAEC,KAAK,EAAE,MAAM;MAAEpC,MAAM,EAAE;IAAQ,CAAE;IAAAqC,QAAA,eAC3CzC,OAAA,CAACb,SAAS;MACVO,KAAK,EAAEA,KAAM;MACbE,KAAK,EAAEoC,qBAAsB;MAC7BpB,aAAa,EAAEA,aAAc;MAC7BE,aAAa,EAAEA,aAAc;MAC7BC,SAAS,EAAEA,SAAU;MACrBV,MAAM,EAAEA,MAAO;MACfqC,OAAO;MACPC,mBAAmB,EAAC,WAAW;MAC/B1C,SAAS,EAAEA,SAAU;MAAAwC,QAAA,gBAErBzC,OAAA,CAACX,OAAO;QAACkD,KAAK,EAAEpC,YAAa;QAACyC,QAAQ;QAACC,QAAQ;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAClDjD,OAAA,CAACV,QAAQ;QAAAwD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACZjD,OAAA,CAACT,UAAU;QAAC2D,KAAK,EAAC,MAAM;QAACC,GAAG,EAAE;MAAG;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACX,CAAC;AAEV,CAAC;AAACvC,EAAA,CAzDID,YAAY;EAAA,QACyBjB,aAAa,EACbC,aAAa;AAAA;AAAA2D,EAAA,GAFlD3C,YAAY;AA2DlB,eAAeA,YAAY;AAAC,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}