{"ast":null,"code":"var _jsxFileName = \"/Users/nhuang/Desktop/AIPR/llm-composition/src/components/OverviewFlow/OverviewFlow.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useState } from 'react';\nimport ReactFlow, { addEdge, MiniMap, Controls, Background, useNodesState, useEdgesState } from 'reactflow';\n// import useWebSocket from 'react-use-websocket';\nimport { io } from 'socket.io-client';\nimport InitialAsk from './InitialAsk';\nimport Dialog from './Dialog';\nimport { nodes as initialNodes, edges as initialEdges } from './initial-elements';\nimport CustomNode from './CustomNode';\nimport 'reactflow/dist/style.css';\nimport './overview.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  custom: CustomNode\n};\nconst minimapStyle = {\n  height: 120\n};\nconst id_to_name_mapping = {\n  '1': 'Dispatcher',\n  '2': 'Plant Health Bot',\n  '3': 'Production Output Bot',\n  '4': 'Distribution Bot',\n  '5': 'Human Resources Bot'\n};\nconst id_to_color_mapping = {};\nconst onInit = reactFlowInstance => console.log('flow loaded:', reactFlowInstance);\nconst OverviewFlow = () => {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [initialAsk, setInitialAsk] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), []);\n\n  /* Sockets Approach */\n  useEffect(() => {\n    const socket = io('http://localhost:5000');\n    socket.on('addEdge', data => {\n      if (data.type === 'addEdge') {\n        message = {};\n        setMessages(prevMessages => [...prevMessages, data.edge]);\n        setEdges([]);\n        setEdges(eds => addEdge(data.edge, eds));\n      }\n    });\n    socket.on('initialAsk', data => {\n      if (data.type === 'initialAsk') {\n        setInitialAsk(data.ask);\n        setMessages([]);\n      }\n    });\n    socket.on('askFinished', data => {\n      if (data.type === 'askFinished') {\n        setEdges([]);\n      }\n    });\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n\n  // we are using a bit of a shortcut here to adjust the edge type\n  // this could also be done with a custom edge for example\n  const edgesWithUpdatedTypes = edges.map(edge => {\n    if (edge.sourceHandle) {\n      const edgeType = nodes.find(node => node.type === 'custom').data.selects[edge.sourceHandle];\n      edge.type = edgeType;\n    }\n    return edge;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"row\",\n    style: {\n      width: '100vw',\n      height: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edgesWithUpdatedTypes,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      onInit: onInit,\n      fitView: true,\n      attributionPosition: \"top-right\",\n      nodeTypes: nodeTypes,\n      style: {\n        width: '50%',\n        height: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(MiniMap, {\n        style: minimapStyle,\n        zoomable: true,\n        pannable: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Background, {\n        color: \"#aaa\",\n        gap: 16\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: true,\n      style: {\n        width: '50%',\n        height: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(InitialAsk, {\n        ask: initialAsk\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: messages.map((item, index) => /*#__PURE__*/_jsxDEV(Dialog, {\n          source_name: item.source,\n          source_color: \"blue\",\n          target_name: \"Bob\",\n          target_color: \"green\",\n          message: \"Hello, how are you?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(OverviewFlow, \"70g1Oiuyw/hxEmc8hPWE/x35zn4=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = OverviewFlow;\nexport default OverviewFlow;\nvar _c;\n$RefreshReg$(_c, \"OverviewFlow\");","map":{"version":3,"names":["React","useCallback","useEffect","useState","ReactFlow","addEdge","MiniMap","Controls","Background","useNodesState","useEdgesState","io","InitialAsk","Dialog","nodes","initialNodes","edges","initialEdges","CustomNode","jsxDEV","_jsxDEV","nodeTypes","custom","minimapStyle","height","id_to_name_mapping","id_to_color_mapping","onInit","reactFlowInstance","console","log","OverviewFlow","_s","setNodes","onNodesChange","setEdges","onEdgesChange","initialAsk","setInitialAsk","messages","setMessages","onConnect","params","eds","socket","on","data","type","message","prevMessages","edge","ask","disconnect","edgesWithUpdatedTypes","map","sourceHandle","edgeType","find","node","selects","class","style","width","children","fitView","attributionPosition","zoomable","pannable","fileName","_jsxFileName","lineNumber","columnNumber","color","gap","item","index","source_name","source","source_color","target_name","target_color","_c","$RefreshReg$"],"sources":["/Users/nhuang/Desktop/AIPR/llm-composition/src/components/OverviewFlow/OverviewFlow.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport ReactFlow, {\n  addEdge,\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n} from 'reactflow';\n// import useWebSocket from 'react-use-websocket';\nimport { io } from 'socket.io-client';\nimport InitialAsk from './InitialAsk';\nimport Dialog from './Dialog';\n\nimport { nodes as initialNodes, edges as initialEdges } from './initial-elements';\nimport CustomNode from './CustomNode';\n\nimport 'reactflow/dist/style.css';\nimport './overview.css';\n\nconst nodeTypes = {\n  custom: CustomNode,\n};\n\nconst minimapStyle = {\n  height: 120,\n};\n\nconst id_to_name_mapping = {\n  '1': 'Dispatcher',\n  '2': 'Plant Health Bot',\n  '3': 'Production Output Bot',\n  '4': 'Distribution Bot',\n  '5': 'Human Resources Bot'\n}\nconst id_to_color_mapping = {\n\n}\n\nconst onInit = (reactFlowInstance) => console.log('flow loaded:', reactFlowInstance);\n\nconst OverviewFlow = () => {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [initialAsk, setInitialAsk] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const onConnect = useCallback((params) => setEdges((eds) => addEdge(params, eds)), []);\n\n  /* Sockets Approach */\n  useEffect(() => {\n    const socket = io('http://localhost:5000');\n\n    socket.on('addEdge', (data) => {\n      if (data.type === 'addEdge') {\n        message = {\n\n        }\n        setMessages((prevMessages) => [...prevMessages, data.edge]);\n        setEdges([])\n        setEdges((eds) => addEdge(data.edge, eds));\n      }\n    });\n\n    socket.on('initialAsk', (data) => {\n      if (data.type === 'initialAsk') {\n        setInitialAsk(data.ask)\n        setMessages([])\n      }\n    });\n\n    socket.on('askFinished', (data) => {\n      if (data.type === 'askFinished') {\n        setEdges([])\n      }\n    });\n\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n\n\n  // we are using a bit of a shortcut here to adjust the edge type\n  // this could also be done with a custom edge for example\n  const edgesWithUpdatedTypes = edges.map((edge) => {\n    if (edge.sourceHandle) {\n      const edgeType = nodes.find((node) => node.type === 'custom').data.selects[edge.sourceHandle];\n      edge.type = edgeType;\n    }\n\n    return edge;\n  });\n\n  return (\n    <div class=\"row\" style={{ width: '100vw', height: '100vh' }}>\n        <ReactFlow\n          nodes={nodes}\n          edges={edgesWithUpdatedTypes}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={onConnect}\n          onInit={onInit}\n          fitView\n          attributionPosition=\"top-right\"\n          nodeTypes={nodeTypes}\n          style={{ width: '50%', height: '100%' }}\n        >\n          <MiniMap style={minimapStyle} zoomable pannable />\n          <Controls />\n          <Background color=\"#aaa\" gap={16} />\n        </ReactFlow>\n        <div class style={{ width: '50%', height: '100%' }}>\n          <InitialAsk ask={initialAsk}/>\n          <ul>\n            {messages.map((item, index) => (\n              <Dialog\n                source_name={item.source}\n                source_color=\"blue\"\n                target_name=\"Bob\"\n                target_color=\"green\"\n                message=\"Hello, how are you?\"\n              />\n            ))}\n          </ul>\n        </div>\n    </div>\n  );\n};\n\nexport default OverviewFlow;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}